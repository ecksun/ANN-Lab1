import numpy
import pylab
import mlp
import sys

classA = numpy.random.randn(50,2)+1
classB = numpy.random.randn(50,2)-1


classA =  \
numpy.array([[ 2.74156136,  1.83033373],
 [ 0.17053204,  0.9380652 ],
 [ 0.11244986,  0.66872191],
 [ 1.11468104,  0.48196029],
 [ 0.87292474,  2.91033612],
 [ 1.56422022,  1.39145649],
 [ 0.6406167 ,  1.72271443],
 [ 2.88814627, -0.21082433],
 [ 0.7754667 ,  0.72713429],
 [ 0.81785053,  0.6081576 ],
 [ 1.9780088 ,  0.48227336],
 [-1.46670567,  0.61176883],
 [ 1.77068328,  0.56465267],
 [ 0.22033887, -0.08742171],
 [ 2.24365562,  1.19741273],
 [ 0.25132058,  0.21470906],
 [ 0.86628334,  2.50197519],
 [ 1.13318391,  0.12920036],
 [ 0.90631695,  1.31194182],
 [ 1.97650526,  1.24191815],
 [-0.97220974,  2.27560865],
 [ 0.44477187,  0.8055373 ],
 [ 0.79355024,  0.73338036],
 [ 0.57233599,  1.95981224],
 [ 0.56348561,  0.19280199],
 [ 1.10639565,  0.78392974],
 [ 1.78129155,  0.52400167],
 [ 1.66452251,  0.56851429],
 [ 1.59075478, -0.63541833],
 [ 0.84057932,  0.90444344],
 [ 1.39312014,  1.13483155],
 [ 0.36925784,  0.67416159],
 [ 0.26228304,  1.63131227],
 [ 0.33068642,  1.16363923],
 [ 2.1910475 ,  0.27047553],
 [-0.29692481, -0.06894855],
 [ 1.39643011,  1.11361298],
 [ 0.49074939, -0.29764286],
 [ 1.40713445,  1.63741595],
 [-0.58097023,  1.08875561],
 [ 1.4822866 ,  0.28970529],
 [ 0.64487916,  0.22925079],
 [ 2.27775363, -0.24513824],
 [ 0.12871243,  0.38215367],
 [ 0.93373529, -0.16729355],
 [ 1.25744234,  1.16240086],
 [ 1.23554983, -0.72186117],
 [ 1.91804767,  0.76642933],
 [ 0.38492019,  2.24598594],
 [ 0.96499485, -0.30429584]])

classB = \
numpy.array([[-1.01632534,  0.47963513],
 [-1.5869497 , -2.48129494],
 [-0.60589432,  0.04566134],
 [ 0.28887024,  0.76031208],
 [-0.17342118, -2.39788182],
 [-0.47706417, -1.1651582 ],
 [-1.13218701, -0.77790992],
 [ 0.46415802, -2.59104897],
 [-0.81550183, -2.04125894],
 [-3.03099293, -0.160806  ],
 [-0.95133178, -2.11182281],
 [-1.74701463, -1.01767473],
 [-0.78465778, -0.89029917],
 [-1.89445616,  0.66313845],
 [-0.91248732, -3.3378554 ],
 [-2.53282073, -0.92626903],
 [-0.7852684 , -1.21144201],
 [ 0.99336724, -1.55418506],
 [-0.28746149, -0.97611897],
 [-1.56090047, -0.30332596],
 [-0.79119646, -0.99355625],
 [-1.85539283, -1.86023225],
 [-1.43707088, -1.05897617],
 [-1.65928436, -0.10271963],
 [-1.75569073, -0.26191617],
 [-1.24631566, -0.45801311],
 [-0.53073841, -0.76871041],
 [ 1.20871913, -0.80334723],
 [-0.42245786, -1.90577663],
 [ 0.60433596, -1.99243196],
 [-0.41445893, -1.57017624],
 [ 0.99478372, -2.45473696],
 [-0.1588952 , -0.302065  ],
 [-0.61210947, -2.40539432],
 [-1.42871437, -0.63092026],
 [-2.07202866, -3.72251752],
 [-1.17854973,  0.03713033],
 [-1.72803003, -0.140718  ],
 [ 0.20860837, -0.66038457],
 [-2.27971229,  0.25058513],
 [-1.3115083 , -1.06954862],
 [-2.90236613, -0.88651755],
 [ 0.59410073, -2.3645945 ],
 [-2.0400102 ,  0.35679563],
 [-2.34186559, -1.86586107],
 [-2.81450335, -2.12983099],
 [-1.67076497, -1.8803108 ],
 [ 0.21140438, -0.2996385 ],
 [-1.08437786, -2.14891578],
 [-0.71008965, -1.00660869]])

classC = numpy.concatenate((classA, classB))
# print classA

targetA = numpy.zeros((50,1))
targetB = numpy.ones((50,1))


targetC = numpy.concatenate((targetA, targetB))
# print targetC

pylab.plot(classA[:,0], classA[:,1], 'g.')
pylab.plot(classB[:,0], classB[:,1], 'r.')
# pylab.plot(classC[:,0], classC[:,1], 'r.')
# pylab.show()

if (len(sys.argv) >= 4):
    nhidden = sys.argv[1]
    beta = sys.argv[2]
    momentum = sys.argv[3]
    outtype = sys.argv[4]
else:
    nhidden = 2
    beta = 1
    momentum = 0.9
    outtype = 'logistic'


tron = mlp.mlp(classC, targetC, nhidden, beta, momentum, 'logistic')

tron.mlptrain(classC, targetC, 0.4, 1000)

xrange = numpy.arange( -4 , 4 , 0.1 )

yrange = numpy.arange(-4 , 4 , 0.1 )

xgrid,ygrid = numpy.meshgrid ( xrange , yrange )

noOfPoints = xgrid.shape[ 0 ] * xgrid.shape [ 1 ]

xcoords = xgrid.reshape( ( noOfPoints , 1 ) )
ycoords = ygrid.reshape( ( noOfPoints , 1 ) )
samples = numpy.concatenate( ( xcoords , ycoords) , axis=1)

ones = -numpy.ones ( xcoords.shape )

samples = numpy.concatenate ( ( samples , ones ) , axis =1)

indicator = tron.mlpfwd ( samples )
indicator = indicator.reshape ( xgrid . shape )

pylab.contour ( xrange , yrange , indicator , ( 0.5 , ) )
pylab.show ( )

